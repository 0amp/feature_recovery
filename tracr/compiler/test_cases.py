# Copyright 2022 DeepMind Technologies Limited. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""A set of RASP programs and input/output pairs used in integration tests."""

from tracr.compiler import lib, generated_lib
from tracr.rasp import rasp

UNIVERSAL_TEST_CASES = [
    dict(
        testcase_name="frac_prevs_1",
        program=lib.make_frac_prevs(rasp.tokens == "l"),
        vocab={"h", "e", "l", "o"},
        test_input=list("hello"),
        expected_output=[0.0, 0.0, 1 / 3, 1 / 2, 2 / 5],
        max_seq_len=5,
    ),
    dict(
        testcase_name="frac_prevs_2",
        program=lib.make_frac_prevs(rasp.tokens == "("),
        vocab={"a", "b", "c", "(", ")"},
        test_input=list("a()b(c))"),
        expected_output=[0.0, 1 / 2, 1 / 3, 1 / 4, 2 / 5, 2 / 6, 2 / 7, 2 / 8],
        max_seq_len=10,
    ),
    dict(
        testcase_name="frac_prevs_3",
        program=lib.make_frac_prevs(rasp.tokens == ")"),
        vocab={"a", "b", "c", "(", ")"},
        test_input=list("a()b(c))"),
        expected_output=[0.0, 0.0, 1 / 3, 1 / 4, 1 / 5, 1 / 6, 2 / 7, 3 / 8],
        max_seq_len=10,
    ),
    dict(
        testcase_name="shift_by_one",
        program=lib.shift_by(1, rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=[None, "a", "b", "c"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="shift_by_two",
        program=lib.shift_by(2, rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=[None, None, "a", "b"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="detect_pattern_a",
        program=lib.detect_pattern(rasp.tokens, "a"),
        vocab={"a", "b", "c", "d"},
        test_input=list("bacd"),
        expected_output=[False, True, False, False],
        max_seq_len=5,
    ),
    dict(
        testcase_name="detect_pattern_ab",
        program=lib.detect_pattern(rasp.tokens, "ab"),
        vocab={"a", "b"},
        test_input=list("aaba"),
        expected_output=[None, False, True, False],
        max_seq_len=5,
    ),
    dict(
        testcase_name="detect_pattern_ab_2",
        program=lib.detect_pattern(rasp.tokens, "ab"),
        vocab={"a", "b"},
        test_input=list("abaa"),
        expected_output=[None, True, False, False],
        max_seq_len=5,
    ),
    dict(
        testcase_name="detect_pattern_ab_3",
        program=lib.detect_pattern(rasp.tokens, "ab"),
        vocab={"a", "b"},
        test_input=list("aaaa"),
        expected_output=[None, False, False, False],
        max_seq_len=5,
    ),
    dict(
        testcase_name="detect_pattern_abc",
        program=lib.detect_pattern(rasp.tokens, "abc"),
        vocab={"a", "b", "c"},
        test_input=list("abcabc"),
        expected_output=[None, None, True, False, False, True],
        max_seq_len=6,
    ),
]

GENERATED_LIB_TEST_CASES = [
    dict(
        testcase_name="token_position_encoding_simple",
        program=generated_lib.make_token_position_encoding(),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "b", "c", "d"],
        expected_output=[(0, 3), (1, 2), (2, 1), (3, 0)],
        max_seq_len=4,
    ),
    dict(
        testcase_name="palindrome_detection_simple",
        program=generated_lib.make_palindrome_detection(rasp.tokens),
        vocab={"r", "a", "c", "e", "b", "o", "t"},
        test_input=["r", "a", "c", "e", "c", "a", "r"],
        expected_output=[False, False, False, True, False, False, False],
        max_seq_len=7,
    ),
    dict(
        testcase_name="nested_pattern_extraction_simple",
        program=generated_lib.make_nested_pattern_extraction(rasp.tokens, "(", ")"),
        vocab={"(", ")", "a", "b", "c", "d"},
        test_input=["(", "a", "(", "b", ")", "c", ")", "(", "d", ")"],
        expected_output=[(True, False), (False, False), (True, False), (False, False), (False, True), (False, False), (False, True), (True, False), (False, False), (False, True)],
        max_seq_len=10,
    ),
    dict(
        testcase_name="sequential_duplicate_removal_simple",
        program=generated_lib.make_sequential_duplicate_removal(rasp.tokens),
        vocab={"a", "b", "c"},
        test_input=["a", "a", "b", "b", "c", "c"],
        expected_output=["a", None, "b", None, "c", None],
        max_seq_len=6,
    ),
    dict(
        testcase_name="token_counter_a",
        program=generated_lib.make_token_counter(rasp.tokens, "a"),
        vocab={"a", "b", "n"},
        test_input=["b", "a", "n", "a", "n", "a"],
        expected_output=[0, 1, 1, 2, 2, 3],
        max_seq_len=6,
    ),
    dict(
        testcase_name="unique_token_extractor_simple",
        program=generated_lib.make_unique_token_extractor(rasp.tokens),
        vocab={"b", "a", "n"},
        test_input=["b", "a", "n", "a", "n", "a"],
        expected_output=["b", "a", "n", None, None, None],
        max_seq_len=6,
    ),
    dict(
        testcase_name="token_sorting_by_length_simple",
        program=generated_lib.make_token_sorting_by_length(rasp.tokens),
        vocab={"word", "a", "is", "sequence"},
        test_input=["word", "a", "is", "sequence"],
        expected_output=["a", "is", "word", "sequence"],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_pairing_simple",
        program=generated_lib.make_token_pairing(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "b", "c", "d"],
        expected_output=[("a", "b"), ("b", "c"), ("c", "d"), None],
        max_seq_len=4,
    ),
    dict(
        testcase_name="leading_token_identification_simple",
        program=generated_lib.make_leading_token_identification(rasp.tokens),
        vocab={"x", "y", "z"},
        test_input=["x", "y", "x", "z", "y"],
        expected_output=[True, True, False, True, False],
        max_seq_len=5,
    ),
    dict(
        testcase_name="token_frequency_normalization_simple",
        program=generated_lib.make_token_frequency_normalization(rasp.tokens),
        vocab={"a", "b", "c"},
        test_input=["a", "a", "b", "c", "c", "c"],
        expected_output=[0.33, 0.33, 0.16, 0.5, 0.5, 0.5],
        max_seq_len=6,
    ),
    dict(
        testcase_name="token_cascade_simple",
        program=generated_lib.make_token_cascade(rasp.tokens),
        vocab={"a", "b", "c"},
        test_input=["a", "b", "c"],
        expected_output=["a", "bb", "ccc"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_sandwich_simple",
        program=generated_lib.make_token_sandwich(rasp.tokens, "-"),
        vocab={"a", "b", "c"},
        test_input=["a", "b", "c"],
        expected_output=["a", "-", "b", "-", "c"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="token_mirroring_simple",
        program=generated_lib.make_token_mirroring(rasp.tokens),
        vocab={"abc", "def", "ghi"},
        test_input=["abc", "def", "ghi"],
        expected_output=["cba", "fed", "ihg"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_abbreviation_simple",
        program=generated_lib.make_token_abbreviation(rasp.tokens),
        vocab={"international", "business", "machines"},
        test_input=["international", "business", "machines"],
        expected_output=["int", "bus", "mac"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="numeric_range_tagging_simple",
        program=generated_lib.make_numeric_range_tagging(rasp.tokens, 10, 20),
        vocab={"5", "15", "25", "20"},
        test_input=["5", "15", "25", "20"],
        expected_output=[False, True, False, True],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_anagram_identifier_simple",
        program=generated_lib.make_token_anagram_identifier(rasp.tokens, "listen"),
        vocab={"enlist", "google", "inlets", "banana"},
        test_input=["enlist", "google", "inlets", "banana"],
        expected_output=[True, False, True, False],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_boundary_detector_simple",
        program=generated_lib.make_token_boundary_detector(rasp.tokens),
        vocab={"apple", "banana", "apple", "orange"},
        test_input=["apple", "banana", "apple", "orange"],
        expected_output=[False, True, False, True],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_length_parity_checker_simple",
        program=generated_lib.make_token_length_parity_checker(rasp.tokens),
        vocab={"hello", "worlds", "!", "2022"},
        test_input=["hello", "worlds", "!", "2022"],
        expected_output=[False, True, False, True],
        max_seq_len=4,
    ),
    dict(
        testcase_name="vowel_consonant_ratio_simple",
        program=generated_lib.make_vowel_consonant_ratio(rasp.tokens),
        vocab={"apple", "sky", "aeiou"},
        test_input=["apple", "sky", "aeiou"],
        expected_output=[2/3, 0/3, float('inf')],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_capitalization_alternator_simple",
        program=generated_lib.make_token_capitalization_alternator(rasp.tokens),
        vocab={"hello", "world"},
        test_input=["hello", "world"],
        expected_output=["HeLlO", "WoRlD"],
        max_seq_len=2,
    ),
    dict(
        testcase_name="numeric_token_range_filter_simple",
        program=generated_lib.make_numeric_token_range_filter(rasp.tokens, 10, 50),
        vocab={"5", "20", "60", "30"},
        test_input=["5", "20", "60", "30"],
        expected_output=[None, "20", None, "30"],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_reversal_with_exclusion_simple",
        program=generated_lib.make_token_reversal_with_exclusion(rasp.tokens, "nochange"),
        vocab={"reverse", "this", "nochange"},
        test_input=["reverse", "this", "nochange"],
        expected_output=["esrever", "siht", "nochange"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_frequency_deviation_simple",
        program=generated_lib.make_token_frequency_deviation(rasp.tokens),
        vocab={"a", "b", "c"},
        test_input=["a", "a", "b", "b", "c", "c"],
        expected_output=[0.33, -0.33, 0.33, -0.66, 0.33, -0.33],
        max_seq_len=6,
    ),
    dict(
        testcase_name="sequential_token_distance_measurement_simple",
        program=generated_lib.make_sequential_token_distance_measurement(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "b", "c", "a", "d"],
        expected_output=[3, 3, 3, 0, 3],
        max_seq_len=5,
    ),
    dict(
        testcase_name="emoji_sentiment",
        program=generated_lib.make_emoji_sentiment_classifier(rasp.tokens),
        vocab={"😊", "😢", "📘"},
        test_input=["😊", "😢", "📘"],
        expected_output=["positive", "negative", "neutral"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="palindrome_word_spotter",
        program=generated_lib.make_palindrome_word_spotter(rasp.tokens),
        vocab={"racecar", "hello", "noon"},
        test_input=["racecar", "hello", "noon"],
        expected_output=["racecar", None, "noon"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="spam_message_detector",
        program=generated_lib.make_spam_message_detector(rasp.tokens),
        vocab={"free", "offer", "click", "now"},
        test_input=["free", "offer", "click", "now"],
        expected_output="spam",
        max_seq_len=4,
    ),
    dict(
        testcase_name="secret_code_decoder",
        program=generated_lib.make_secret_code_decoder(rasp.tokens),
        vocab={"uryyb", "jbeyq"},
        test_input=["uryyb", "jbeyq"],
        expected_output=["hello", "world"],
        max_seq_len=2,
    ),
    dict(
        testcase_name="lexical_density_calculator",
        program=generated_lib.make_lexical_density_calculator(rasp.tokens),
        vocab={"the", "quick", "brown", "fox"},
        test_input=["the", "quick", "brown", "fox"],
        expected_output=0.75,
        max_seq_len=4,
    ),
    dict(
        testcase_name="word_count_by_length",
        program=generated_lib.make_word_count_by_length(rasp.tokens),
        vocab={5: 2, 4: 1},
        test_input=["apple", "pear", "banana"],
        expected_output={5: 2, 4: 1},
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_symmetry_checker",
        program=generated_lib.make_token_symmetry_checker(rasp.tokens),
        vocab={True, False},
        test_input=["radar", "apple", "rotor", "data"],
        expected_output=[True, False, True, False],
        max_seq_len=4,
    ),
    dict(
        testcase_name="sequential_gap_filler",
        program=generated_lib.make_sequential_gap_filler(rasp.tokens, "-"),
        vocab={"word1", "-", "word3"},
        test_input=["word1", None, "word3"],
        expected_output=["word1", "-", "word3"],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_oscillation_detector",
        program=generated_lib.make_token_oscillation_detector(rasp.tokens),
        vocab={True, False},
        test_input=[1, 3, 1, 3, 1],
        expected_output=[True, True, True, True, True],
        max_seq_len=5,
    ),
    dict(
        testcase_name="token_rotation_identifier",
        program=generated_lib.make_token_rotation_identifier(rasp.tokens, 2),
        vocab={True, False},
        test_input=["hello", "llohe", "lohel"],
        expected_output=[True, True, True],
        max_seq_len=3,
    ),
    dict(
        testcase_name="token_alternation_checker",
        program=generated_lib.make_token_alternation_checker(rasp.tokens),
        vocab={True, False},
        test_input=["cat", "dog", "cat", "dog"],
        expected_output=[True, True, True, True],
        max_seq_len=4,
    ),
    dict(
        testcase_name="token_trend_analysis",
        program=generated_lib.make_token_trend_analysis(rasp.tokens),
        vocab={"increasing", "decreasing", "constant"},
        test_input=[1, 2, 3, 3, 2, 1],
        expected_output=["increasing", "increasing", "constant", "decreasing", "decreasing"],
        max_seq_len=6,
    ),
    dict(
        testcase_name="token_frequency_classifier",
        program=generated_lib.make_token_frequency_classifier(rasp.tokens),
        vocab={"frequent", "common", "rare"},
        test_input=["a", "b", "a", "c", "a", "b"],
        expected_output=["frequent", "common", "frequent", "rare", "frequent", "common"],
        max_seq_len=6,
    ),
    dict(
        testcase_name="token_positional_balance_analyzer",
        program=generated_lib.make_token_positional_balance_analyzer(rasp.tokens),
        vocab={"front", "center", "rear"},
        test_input=["a", "b", "c", "d", "e"],
        expected_output=["front", "front", "center", "rear", "rear"],
        max_seq_len=5,
    ),
]

TEST_CASES = UNIVERSAL_TEST_CASES + GENERATED_LIB_TEST_CASES + [
    dict(
        testcase_name="reverse_1",
        program=lib.make_reverse(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=list("dcba"),
        max_seq_len=5,
    ),
    dict(
        testcase_name="reverse_2",
        program=lib.make_reverse(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=list("abc"),
        expected_output=list("cba"),
        max_seq_len=5,
    ),
    dict(
        testcase_name="reverse_3",
        program=lib.make_reverse(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=list("ad"),
        expected_output=list("da"),
        max_seq_len=5,
    ),
    dict(
        testcase_name="reverse_4",
        program=lib.make_reverse(rasp.tokens),
        vocab={"a", "b", "c", "d"},
        test_input=["c"],
        expected_output=["c"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="length_categorical_1",
        program=rasp.categorical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=list("abc"),
        expected_output=[3, 3, 3],
        max_seq_len=3,
    ),
    dict(
        testcase_name="length_categorical_2",
        program=rasp.categorical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=list("ad"),
        expected_output=[2, 2],
        max_seq_len=3,
    ),
    dict(
        testcase_name="length_categorical_3",
        program=rasp.categorical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=["c"],
        expected_output=[1],
        max_seq_len=3,
    ),
    dict(
        testcase_name="length_numerical_1",
        program=rasp.numerical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=list("abc"),
        expected_output=[3, 3, 3],
        max_seq_len=3,
    ),
    dict(
        testcase_name="length_numerical_2",
        program=rasp.numerical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=list("ad"),
        expected_output=[2, 2],
        max_seq_len=3,
    ),
    dict(
        testcase_name="length_numerical_3",
        program=rasp.numerical(lib.make_length()),
        vocab={"a", "b", "c", "d"},
        test_input=["c"],
        expected_output=[1],
        max_seq_len=3,
    ),
    dict(
        testcase_name="pair_balance_1",
        program=lib.make_pair_balance(rasp.tokens, "(", ")"),
        vocab={"a", "b", "c", "(", ")"},
        test_input=list("a()b(c))"),
        expected_output=[0.0, 1 / 2, 0.0, 0.0, 1 / 5, 1 / 6, 0.0, -1 / 8],
        max_seq_len=10,
    ),
    dict(
        testcase_name="shuffle_dyck2_1",
        program=lib.make_shuffle_dyck(pairs=["()", "{}"]),
        vocab={"(", ")", "{", "}"},
        test_input=list("({)}"),
        expected_output=[1, 1, 1, 1],
        max_seq_len=5,
    ),
    dict(
        testcase_name="shuffle_dyck2_2",
        program=lib.make_shuffle_dyck(pairs=["()", "{}"]),
        vocab={"(", ")", "{", "}"},
        test_input=list("(){)}"),
        expected_output=[0, 0, 0, 0, 0],
        max_seq_len=5,
    ),
    dict(
        testcase_name="shuffle_dyck2_3",
        program=lib.make_shuffle_dyck(pairs=["()", "{}"]),
        vocab={"(", ")", "{", "}"},
        test_input=list("{}("),
        expected_output=[0, 0, 0],
        max_seq_len=5,
    ),
    dict(
        testcase_name="shuffle_dyck3_1",
        program=lib.make_shuffle_dyck(pairs=["()", "{}", "[]"]),
        vocab={"(", ")", "{", "}", "[", "]"},
        test_input=list("({)[}]"),
        expected_output=[1, 1, 1, 1, 1, 1],
        max_seq_len=6,
    ),
    dict(
        testcase_name="shuffle_dyck3_2",
        program=lib.make_shuffle_dyck(pairs=["()", "{}", "[]"]),
        vocab={"(", ")", "{", "}", "[", "]"},
        test_input=list("(){)}"),
        expected_output=[0, 0, 0, 0, 0],
        max_seq_len=6,
    ),
    dict(
        testcase_name="shuffle_dyck3_3",
        program=lib.make_shuffle_dyck(pairs=["()", "{}", "[]"]),
        vocab={"(", ")", "{", "}", "[", "]"},
        test_input=list("{}[(]"),
        expected_output=[0, 0, 0, 0, 0],
        max_seq_len=6,
    ),
    dict(
        testcase_name="hist",
        program=lib.make_hist(),
        vocab={"a", "b", "c", "d"},
        test_input=list("abac"),
        expected_output=[2, 1, 2, 1],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_unique_1",
        program=lib.make_sort_unique(vals=rasp.tokens, keys=rasp.tokens),
        vocab={1, 2, 3, 4},
        test_input=[2, 4, 3, 1],
        expected_output=[1, 2, 3, 4],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_unique_2",
        program=lib.make_sort_unique(vals=rasp.tokens, keys=1 - rasp.indices),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=["d", "c", "b", "a"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_1",
        program=lib.make_sort(
            vals=rasp.tokens, keys=rasp.tokens, max_seq_len=5, min_key=1
        ),
        vocab={1, 2, 3, 4},
        test_input=[2, 4, 3, 1],
        expected_output=[1, 2, 3, 4],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_2",
        program=lib.make_sort(
            vals=rasp.tokens, keys=1 - rasp.indices, max_seq_len=5, min_key=1
        ),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=["d", "c", "b", "a"],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_3",
        program=lib.make_sort(
            vals=rasp.tokens, keys=rasp.tokens, max_seq_len=5, min_key=1
        ),
        vocab={1, 2, 3, 4},
        test_input=[2, 4, 1, 2],
        expected_output=[1, 2, 2, 4],
        max_seq_len=5,
    ),
    dict(
        testcase_name="sort_freq",
        program=lib.make_sort_freq(max_seq_len=5),
        vocab={1, 2, 3, 4},
        test_input=[2, 4, 2, 1],
        expected_output=[2, 2, 4, 1],
        max_seq_len=5,
    ),
    dict(
        testcase_name="make_count_less_freq_categorical_1",
        program=lib.make_count_less_freq(n=2),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "a", "a", "b", "b", "c"],
        expected_output=[3, 3, 3, 3, 3, 3],
        max_seq_len=6,
    ),
    dict(
        testcase_name="make_count_less_freq_categorical_2",
        program=lib.make_count_less_freq(n=2),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "a", "c", "b", "b", "c"],
        expected_output=[6, 6, 6, 6, 6, 6],
        max_seq_len=6,
    ),
    dict(
        testcase_name="make_count_less_freq_numerical_1",
        program=rasp.numerical(lib.make_count_less_freq(n=2)),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "a", "a", "b", "b", "c"],
        expected_output=[3, 3, 3, 3, 3, 3],
        max_seq_len=6,
    ),
    dict(
        testcase_name="make_count_less_freq_numerical_2",
        program=rasp.numerical(lib.make_count_less_freq(n=2)),
        vocab={"a", "b", "c", "d"},
        test_input=["a", "a", "c", "b", "b", "c"],
        expected_output=[6, 6, 6, 6, 6, 6],
        max_seq_len=6,
    ),
    dict(
        testcase_name="make_count_1",
        program=lib.make_count(rasp.tokens, "a"),
        vocab={"a", "b", "c"},
        test_input=["a", "a", "a", "b", "b", "c"],
        expected_output=[3, 3, 3, 3, 3, 3],
        max_seq_len=8,
    ),
    dict(
        testcase_name="make_count_2",
        program=lib.make_count(rasp.tokens, "a"),
        vocab={"a", "b", "c"},
        test_input=["c", "a", "b", "c"],
        expected_output=[1, 1, 1, 1],
        max_seq_len=8,
    ),
    dict(
        testcase_name="make_count_3",
        program=lib.make_count(rasp.tokens, "a"),
        vocab={"a", "b", "c"},
        test_input=["b", "b", "c"],
        expected_output=[0, 0, 0],
        max_seq_len=8,
    ),
    dict(
        testcase_name="make_nary_sequencemap_1",
        program=lib.make_nary_sequencemap(
            lambda x, y, z: x + y - z, rasp.tokens, rasp.tokens, rasp.indices
        ),
        vocab={1, 2, 3},
        test_input=[1, 2, 3],
        expected_output=[2, 3, 4],
        max_seq_len=5,
    ),
    dict(
        testcase_name="make_nary_sequencemap_2",
        program=lib.make_nary_sequencemap(
            lambda x, y, z: x * y / z, rasp.indices, rasp.indices, rasp.tokens
        ),
        vocab={1, 2, 3},
        test_input=[1, 2, 3],
        expected_output=[0, 1 / 2, 4 / 3],
        max_seq_len=3,
    ),
]

# make_nary_sequencemap(f, *sops)

CAUSAL_TEST_CASES = UNIVERSAL_TEST_CASES + [
    dict(
        testcase_name="selector_width",
        program=rasp.SelectorWidth(
            rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE)
        ),
        vocab={"a", "b", "c", "d"},
        test_input=list("abcd"),
        expected_output=[1, 2, 3, 4],
        max_seq_len=5,
    ),
]


# Programs using features that are currently not supported by Tracr and that
# cause the compiler to throw NotImplementerError.
UNSUPPORTED_TEST_CASES = [
    dict(
        testcase_name="numerical_categorical_aggregate",
        program=rasp.Aggregate(
            rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE),
            rasp.numerical(rasp.Map(lambda x: x, rasp.tokens)),
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="categorical_numerical_aggregate",
        program=rasp.numerical(
            rasp.Aggregate(
                rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE),
                rasp.tokens,
            ),
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="numerical_numerical_aggregate",
        program=rasp.numerical(
            rasp.Aggregate(
                rasp.Select(rasp.tokens, rasp.tokens, rasp.Comparison.TRUE),
                rasp.numerical(rasp.Map(lambda x: x, rasp.tokens)),
                default=0
            ),
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="aggregate_with_not_None_default",
        program=rasp.numerical(
            rasp.Aggregate(
                rasp.Select(rasp.indices, rasp.indices, rasp.Comparison.EQ),
                rasp.tokens,
                default=1
            ),
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="numerical_selector",
        program=rasp.SelectorWidth(
            rasp.Select(
                rasp.numerical(rasp.Map(lambda x: x, rasp.tokens)),
                rasp.numerical(rasp.Map(lambda x: x, rasp.tokens)),
                rasp.Comparison.LT,
            )
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="numerical_SequenceMap",
        program=rasp.numerical(
            rasp.SequenceMap(
                lambda x, y: x + y,
                rasp.numerical(rasp.Map(lambda x: x, rasp.indices)),
                rasp.numerical(rasp.Map(lambda x: x, rasp.tokens)),
            )
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="categorical_LinearSequenceMap",
        program=rasp.categorical(
            rasp.LinearSequenceMap(
                rasp.categorical(rasp.indices),
                rasp.categorical(rasp.tokens),
                1,
                1,
            )
        ),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="numerical_tokens",
        program=rasp.numerical(rasp.tokens),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
    dict(
        testcase_name="numerical_indices",
        program=rasp.numerical(rasp.indices),
        vocab={1, 2, 3},
        max_seq_len=5,
    ),
]
